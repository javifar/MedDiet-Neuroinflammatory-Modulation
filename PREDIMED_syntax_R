
# 1. Install packages

library(haven)
library(broom)
library(tidyverse)
library(nlme)
library(writexl)
library(ggthemes)

# 2. Load Data & Edit: Rename, Units conversion, Percentage, Removing rows
dat <- read_sav("./predB50_A25.sav")
dat <- as_factor(dat, levels = "values")
names(dat)<-tolower(names(dat))
dat <- as.data.frame(dat)

# Variables that need rename 

rename_vars <- c(
  cintura_01       = "cint1",
  cintura_03       = "cintura3",
  peso_01          = "peso1",
  peso_03          = "peso3",
  imc_01           = "imc1",
  imc_03           = "imc3",
  hba1c_01         = "hba1c1",
  hba1c_03         = "hba1c3",
  crt_s18_01       = "crt_18s_01",
  crt_s18_03       = "crt_18s_03",
  crt_gapdh_01     = "crt_gapd_01",
  crt_gapdh_03     = "crt_gapd_03",
  ldl_01           = "ldl1",
  ldl_03           = "ldl3",
  placa_gapdh_01   = "placa_gapd_01",
  placa_gapdh_03   = "placa_gapd_03"
)

# Apply rename in one go
dat <- dat %>% dplyr::rename(!!!rename_vars)

# Creating physical activity per week and cholesterol intake in g/day (/1000))

dat <- dat %>% dplyr::mutate(getotawk_01 = getota_1*7,getotawk_03 = getota_3*7)
attr(dat$getotawk_01, "label") <- "AF VISITA 1: Actividad física total (último año) METs.min/semana"
attr(dat$getotawk_03, "label") <- "AF VISITA 3: Actividad física total (último año) METs.min/semana"

#  From mg/day to g/day

dat$colest <- dat$colest / 1000
dat$colest3 <- dat$colest3 / 1000

# Removing 9999.0 (intern code for analyzer sampling error or missing value resulted from pre- or analyticla standpoint)

dat$hba1c_01[dat$hba1c_01 == 9999.0] <- NA
dat$hba1c_03[dat$hba1c_03 == 9999.0] <- NA

# Loop through the variables and create percentage variables in fat types

variables <- c("mo", "po", "sa", "colest")

for (var in variables) {
  # Create a new variable by dividing 'var' by 'gratot' and multiplying by 100
  dat[[paste0(var, "_percent")]] <- (dat[[var]] / dat$gratot) * 100    
}


# Loop through the variables and create percentage variables in fat types
variables <- c("mo3", "po3", "sa3", "colest3")

for (var in variables) {
  # Create a new variable by dividing 'var' by 'gratot3' and multiplying by 100
  dat[[paste0(var, "_percent")]] <- (dat[[var]] / dat$gratot3) * 100
}


# Loop through the variables and calculate the differences in fat types
variables <- c("mo", "po", "sa", "colest")

for (var in variables) {
  # Create new variable names for the differences
  diff_var_name <- paste0("d_", var, "_percent")
  
  # Calculate the differences
  dat[[diff_var_name]] <- dat[[paste0(var, "3_percent")]] - dat[[paste0(var, "_percent")]]
}


# Calculating differences in anthropometric measurements

var <- c("peso",
         "cintura",
         "imc")


for (v in var){
  
  temp<-dat[ , paste0(v, "_03")]-dat[ , paste0(v, "_01")] 
  vs <- paste0("d_", v)
  dat[ , vs] <- temp
  
}

#Cleaning environment
rm(list = c("temp","v", "vs", "var", "vars", "variables", "variables_3", "gratot_var", "var_percent", "group", "groups", "var_diff", "var3", "vars_to_diff", "group_data", "variables_continuas", "ids_to_filter"))


# Diet variables 

variables_adicionales <- c("ac_girasol", "ac_olivavir", "alcoholg", "carnicos","cereales_sinpatata", "colest", "energiat", "fibra","fit", "frutatot", "fsecos", "gratot", "hc","lacteos", "legumbre", "linolenico", "mo","n3marinos", "olivatot", "pescados", "po", "prot","sa", "verdutot", "ac_girasol3", "ac_olivavir3","alcoholg3", "carnicos3", "cereales_sinpatata3","colest3", "energiat3", "fibra3", "fit3", "frutatot3","fsecos3", "gratot3", "hc3", "lacteos3", "legumbre3","linolenico3", "mo3", "n3marinos3", "olivatot3","pescados3", "po3", "prot3", "sa3", "verdutot3")

# Identifying values ==  9999.0 in other variables of interest
variables_con_9999 <- sapply(variables_adicionales, function(variable) {
  any(dat[, variable] == 9999.0, na.rm = TRUE)
})

# Mostrar las variables con valores como 9999.0 
print(variables_adicionales[variables_con_9999])

rm(list = c("variables_con_9999", "variables_adicionales"))


# Covariates: education level, dyslipidaemia in base of lipid profile

dat$escolar1<-with(dat,ifelse(escolar1==1,3,ifelse(escolar1==2,3,ifelse(escolar1==3,2,ifelse(escolar1==4,1,ifelse(escolar1==5,1,ifelse(escolar1==9,9,ifelse(is.na(escolar1),9,NA))))))))
dat$escolar1<-with(dat,ifelse(escolar1==9,NA,escolar1))
attr(dat$escolar1, "value.labels")<-c("Ed. primaria o inferior"=1, "Ed. secundaria/bachiller"=2, "Ed.superior"=3)

# Dyslipidaemia
dat <- dat %>% dplyr::mutate(dislip = ifelse((sexo == 0 & ca_hdl_1 < 40) | (sexo == 1 & ca_hdl_1 < 50) | ldl_01 > 200 | ca_tg_1 > 150 | m_otrohipoli1 == 1,1, 0))

# 3. Select Relevant Variables (genes and covariates of interest) and Rename them

genes <- dat %>%
  select(
    id, sample_name, experiment_name, nodo, sexo, edad0, grup_int,
    p14totm_1, terciles, escolar1, getota_1, alcoholg, hta0, lugarnac1,
    fumas1, proceden0, diabetes0, est_civi1, dislip,
    peso_01, peso_03, d_peso,
    cintura_01, cintura_03, d_cintura,
    imc_01, imc_03, d_imc,
    # Select CRT genes, excluding those with "placa" in the name
    all_of(grep("^crt_", colnames(dat), value = TRUE)[!grepl("placa", grep("^crt_", colnames(dat), value = TRUE))])
  ) %>%
  # Exclude genes not used in analysis (analytic troubles)
  select(
    -c(crt_abcg4_01, crt_abcg4_03, crt_mttp_01, crt_mttp_03, crt_pcsk9_01, crt_pcsk9_03)
  )

# Pivot into long format and extract time information

genes <- genes %>%
  pivot_longer(
    cols = -c(
      id, sexo, edad0, sample_name, grup_int, experiment_name, nodo,
      escolar1, getota_1, lugarnac1, proceden0, fumas1,
      p14totm_1, terciles, hta0, diabetes0, alcoholg, dislip,
      est_civi1, d_peso, d_cintura, d_imc
    ),
    names_pattern = "(.*)_0*([0-9]+)$",
    names_to = c(".value", "time")
  ) %>%
  pivot_longer(
    cols = starts_with("crt_"),
    names_to = "gen",
    values_to = "Ct"
  ) %>%
  mutate(
    gen = str_remove(gen, pattern = "^crt_")
  ) %>%
  as.data.frame()

# Filter by Gene and Remove NA in Reference Gene

neuro_genes <- c("cd86", "cdkn2a", "ido", "ifng", "il10", "lag3",
                 "nampt", "nfe2l2", "pik3cb", "tgfb2", "nlrp3",
                 "nlrp1", "gapdh")

genes <- genes %>%
  filter(gen %in% neuro_genes)

# Identify and remove subjects with missing GAPDH (reference gene)
missing_gapdh <- genes %>%
  filter(is.na(Ct) & gen == "gapdh") %>%
  pull(id) %>%
  unique()

already_removed <- c("70710002", "110104030", "140102090")

genes <- genes %>%
  filter(!id %in% c(missing_gapdh, already_removed))

# 4. Calculate gene expression through relative quantification (delta-delta-Ct method)
# Calculate dCt Relative to GAPDH
# We create a new df for section 5 
genes <- genes %>%
  group_by(sample_name, time) %>%
  mutate(dCt_gapdh = Ct - Ct[gen == "gapdh"])
genes1 <- genes # just section 5

# ddCt: time 3 - time 1
genes <- genes %>%
  group_by(id, gen) %>%
  mutate(ddCt = dCt_gapdh[time == 3] - dCt_gapdh[time == 1])

# Reverse sign for fold change interpretation
genes <- genes %>%
  mutate("-ddCt" = (-1)*(ddCt))

# Calculate mean ddCt per gene and intervention group
genes <- genes %>%
  group_by(gen, grup_int) %>%
  mutate(
    ddCt_mean = mean("-ddCt_mean" = (-1)*(ddCt_mean))

# Calculate RQ = 2^-ddCt
genes <- genes %>%
  mutate(
    RQ_gapdh = 2^(`-ddCt_mean`),
    RQ_ind_gapdh = 2^(`-ddCt`)) %>%
  relocate(RQ_ind_gapdh, .after = ddCt_neg)

# Round digits
genes <- genes %>% mutate_if(is.numeric, round, digits= 3)

5. Within-group comparison (t.test at baseline vs 12-month follow-up). We compare dCt values.

# Select relevant columns and reshape to wide format
genes_wide_gapdh <- genes %>%
  dplyr::select(id, grup_int, gen, time, dCt_gapdh) %>%
  pivot_wider(
    names_from = c(gen, time),
    values_from = dCt_gapdh
  ) %>%
  mutate_if(is.numeric, round, digits = 3) %>%
  as.data.frame()

# Define Gene List and Timepoints

# Genes to analyze (excluding gapdh)
rowvars <- c("cd86", "cdkn2a", "ifng", "il10", "nampt", "nfe2l2", "pik3cb", "tgfb2", "nlrp3")
rowvars <- sort(rowvars)

# Suffixes used in wide format for timepoints
time <- c("_1", "_3")

# Loop: Paired t-tests by Group and Gene

tab <- NA  # initialize results table

for (i in seq_along(rowvars)) {
  # Get variable names for baseline and 12 months
  v <- paste0(rowvars[i], time)
  
  # Paired t-tests for each intervention group
  CI1 <- round(t.test(
    x = subset(genes_wide_gapdh, grup_int == "1")[, v[1]],
    y = subset(genes_wide_gapdh, grup_int == "1")[, v[2]],
    paired = TRUE
  )$conf.int, 4)

  CI2 <- round(t.test(
    x = subset(genes_wide_gapdh, grup_int == "2")[, v[1]],
    y = subset(genes_wide_gapdh, grup_int == "2")[, v[2]],
    paired = TRUE
  )$conf.int, 4)

  CI3 <- round(t.test(
    x = subset(genes_wide_gapdh, grup_int == "3")[, v[1]],
    y = subset(genes_wide_gapdh, grup_int == "3")[, v[2]],
    paired = TRUE
  )$conf.int, 4)

  # Format confidence intervals
  formatted_CI1 <- paste0("(", CI1[1], " - ", CI1[2], ")")
  formatted_CI2 <- paste0("(", CI2[1], " - ", CI2[2], ")")
  formatted_CI3 <- paste0("(", CI3[1], " - ", CI3[2], ")")

  # Append row to results table
  new_row <- cbind(formatted_CI1, formatted_CI2, formatted_CI3)
  tab <- rbind(tab, new_row)
}


# Remove initial NA row
tab <- tab[-1, ]

# Assign row and column names
rownames(tab) <- rowvars
colnames(tab) <- c("OO", "NUTS", "LFD")  # Olive Oil, Nuts, Low-Fat Diet

# Convert to data frame and add gene column
t.test_time_comp <- as.data.frame(tab)
t.test_time_comp <- tibble::rownames_to_column(t.test_time_comp, var = "gen")


6. Between-group comparison. We compare -ddCt values.

# Prepare Data: Pivot to Wide Format

# Pivot -ddCt values into wide format by gene and group, filtering time = 3 (post-intervention)
genes_wide_gapdh <- genes %>%
  select(id, grup_int, gen, time, `-ddCt`) %>%
  pivot_wider(
    names_from = c(gen, grup_int),
    values_from = `-ddCt`
  ) %>%
  filter(time == 3) %>%
  as.data.frame()

# Define Genes and Group Codes


# Genes of interest (excluding GAPDH)
rowvars <- c("cd86", "cdkn2a", "ifng", "il10", "nampt", "nfe2l2", "pik3cb", "tgfb2", "nlrp3")
rowvars <- sort(rowvars)

# Group suffixes as used in wide column names
grup <- c("_1", "_2", "_3")  # 1 = Olive oil, 2 = Nuts, 3 = Low-fat diet

# Loop: t-tests Between Groups

tab <- NA  # initialize result table

for (i in seq_along(rowvars)) {
  
  # Build column names for this gene in each group
  vs <- paste0(rowvars[i], grup)
  
  # Comparison: OO+Nuts (groups 1+2) vs LFD (group 3)
  CI1 <- round(
    t.test(
      x = rowMeans(genes_wide_gapdh[, vs[1:2]], na.rm = TRUE),
      y = genes_wide_gapdh[, vs[3]],
      paired = FALSE
    )$conf.int,
    3
  )
  
  # Comparison: OO vs LFD
  CI2 <- round(
    t.test(genes_wide_gapdh[, vs[1]], genes_wide_gapdh[, vs[3]], paired = FALSE)$conf.int,
    3
  )
  
  # Comparison: Nuts vs LFD
  CI3 <- round(
    t.test(genes_wide_gapdh[, vs[2]], genes_wide_gapdh[, vs[3]], paired = FALSE)$conf.int,
    3
  )
  
  # Format confidence intervals
  formatted_CI1 <- paste0("(", CI1[1], " - ", CI1[2], ")")
  formatted_CI2 <- paste0("(", CI2[1], " - ", CI2[2], ")")
  formatted_CI3 <- paste0("(", CI3[1], " - ", CI3[2], ")")
  
  # Create and append new row
  new_row <- cbind(formatted_CI1, formatted_CI2, formatted_CI3)
  tab <- rbind(tab, new_row)
}

# Final Formatting of Results Table

# Remove first NA row
tab <- tab[-1, ]

# Assign row and column names
rownames(tab) <- rowvars
colnames(tab) <- c("OO+NUTS vs LFD", "OO vs LFD", "NUTS vs LFD")

# Convert to data frame and add gene names as a column
t.test_comparison <- as.data.frame(tab)
t.test_comparison <- tibble::rownames_to_column(t.test_comparison, var = "gen")

5. Linear mixed-effects model

lme_dat <- genes1 %>% pivot_wider(names_from = gen, values_from = dCt_gapdh)
lme_dat$time [lme_dat$time == "1"] <- 1 
lme_dat$time [lme_dat$time == "3"] <- 3 

# Time points as numeric
lme_dat$time<-as.numeric(lme_dat$time)

# Relevel 
lme_dat$grup_int <- as.factor(lme_dat$grup_int)

# Combine groups 1 and 2 into a single group with the value 4 (both MedDiets)

lme_dat$grup_int <- as.character(lme_dat$grup_int)
lme_dat$grup_int[lme_dat$grup_int %in% c("1", "2")] <- "4" 
lme_dat$grup_int <- as.factor(lme_dat$grup_int)

# Names of variables
genes.names <- colnames(lme_dat)[33:44]
no.genes <- length(genes.names)

# Create a named list to hold the fitted models
# Remove the endogenous control we are using 

gene.list <- as.list(1:no.genes)
gene.list$gapdh <- NULL
names(gene.list) <- genes.names

# Loop over gene names
for(i in genes.names){ 

# print status
  print(paste("Running entity:", i, "which is", which(genes.names==i), "out of", no.genes))
  
# trying to ignore variable because of few observations
 if(i == "gapdh")next
     print(i)
  
#1st: adjusting for time and group
tmp <- lme_dat[, c(i,"grup_int","time", "id", "edad0", "sexo", "peso", "escolar1","fumas1", "alcoholg", "hta0", "dislip", "diabetes0","getota_1", "imc")]
fml <- as.formula( paste( i, "~", paste(c("time:grup_int", "time", "grup_int", "edad0", "sexo", "getota_1", "fumas1", "dislip", "imc", "hta0", "diabetes0"), collapse = "+")))
  
# assign fit to list by name
gene.list[[i]] <- lme(fml, random= ~ 1|id, control = lmeControl(opt = "optim"), method="REML", data=tmp, na.action = na.omit)
}

gene.list$gapdh <- NULL

# List of data.frames/tibble
result <- lapply(gene.list, function(x) tidy(x))

# Extracting parameters of interest
result2 <- dplyr::bind_rows(result, .id = "var") %>% dplyr::mutate_if(is.numeric, round, digits = 4)
result2   <- result2 %>% dplyr::select(var, term, p.value)

# 6. Risk factors 
# Categories

1 = "Yes, frequently"
2 = "Former smoker: 0 - 1 year"
3 = "Former smoker: 1 - 5 years"
4 = "Former smoker > 5 años"
5 = "Ever smoker"
9 = "Datos insuficientes"
#####################
# Load again the database

fr <- read_sav("./predB50_A25.sav")

#Keep participants whose transcriptomic profile was analyzed (no analytical troubles or NAs)
dat1 <- unique(genes$id)
dat2 <- unique(fr$id)
rows_to_remove <- setdiff(union(dat1, dat2), intersect(dat1, dat2))
fr <- fr[!fr$id %in% rows_to_remove, ]

rm(list= c("rows_to_remove","dat1", "dat2"))

# Risk factors: absolute frequencies 

hta_tb <-table(fr$hta0, dnn = ("Hipertension"))
diab_tb<-table(fr$diabetes0, dnn = ("Diabetes"))
colest_tb<-table(fr$hipercol0, dnn = ("Dislipemia"))
tabacos_tb<- table(fr$tabaco0, dnn = ("Fumador"))
risk_f <- rbind(hta_tb, diab_tb, colest_tb, tabacos_tb)


# Absolute frequencies per group
hta_tb_grupo <- with(fr, table(hta0, grup_int))
diab_tb_grupo <- with(fr, table(diabetes0, grup_int))
colest_tb_grupo <- with(fr, table(hipercol0, grup_int))
tabacos_tb_grupo <- with(dat, table(tabaco0, grup_int))


# List of tables
table_list <- list(hta = hta_tb_grupo, diab = diab_tb_grupo, colest = colest_tb_grupo, tab = tabacos_tb_grupo)


# Table to dataframe
lista_dataframes <- lapply(table_list, as.data.frame)

# csv
for (nombre_tabla in names(lista_dataframes)) {
  write.csv(lista_dataframes[[nombre_tabla]], file = paste0(nombre_tabla, ".csv"))
}

# List of variable names. Fisher test and categorical comparison
variable_names <- c("hta", "diab", "colest", "tab")

# Initialize a list to store the p-values
p_values_list <- list()


# Loop through the list of tables
for (i in 1:length(table_list)) {
  # Extract the table data
  table_data <- table_list[[i]]
  
  # Apply Fisher's Exact Test directly to the table
  fisher_result <- fisher.test(table_data)
  
  # Extract the p-value from the result
  p_value <- fisher_result$p.value
  
  # Store the p-value in the list
  p_values_list[[i]] <- p_value
}

# Create a table with the p-values and corresponding variable names
result_df <- data.frame(Variable = variable_names, P_Value = unlist(p_values_list))

# 7. Divergent bar plots 
# Gene expression
# Converting gen and Color in factor category

df_plot <- genes %>% dplyr::group_by(gen, grup_int) %>% dplyr::select(gen, grup_int, time, RQ_gapdh) %>% dplyr::filter(time==3) %>% unique()
df_plot$gen <- as.factor(df_plot$gen)

# nesting for just keeping 55 genes and mean of RQ values
df_plot$gen <- toupper(df_plot$gen)
df_plot2 <- df_plot %>% dplyr::group_by(gen, RQ_gapdh, grup_int) %>% nest()

# setting the cutoff for RQ value
df_plot2 <- df_plot %>% dplyr::mutate(Color = ifelse(RQ_gapdh > 1, "TRUE", "FALSE"))

#filter out the endogenous genes & mttp & pcsk9
df_plot2 <- df_plot2 %>% dplyr::filter(!gen %in% c("b2m","gapdh", "s18", "mttp", "pcsk9"))
                              
# Converting 'gen' and 'Color' in factor category and order them
df_plot2$Color <- as.factor(df_plot2$Color)
df_plot2 <- df_plot2 %>% dplyr::filter(gen %in% c('CD86', 'CDKN2A', 'IFNG', 'IL10', 'IL1B', 'NAMPT', 'NFE2L2', 'NLRP3', 'PIK3CB', 'TGFB2'))
genes_order <- c('CD86', 'CDKN2A', 'IFNG', 'IL10', 'IL1B', 'NAMPT', 'NFE2L2', 'NLRP3', 'PIK3CB', 'TGFB2')

# Reverse the order
genes_order_reversed <- rev(genes_order)

df_plot2$gen <- as.factor(df_plot2$gen)
df_plot2 <- as.data.frame(df_plot2)
df_plot2 <- df_plot2[order(df_plot2$gen), ]

df_plot2$gen <- factor(df_plot2$gen, levels = genes_order_reversed )

# Method using afterscale to set the beginning in value = 1 - Basal plot, getting the fold change per gene, ignoring the grup_int

df_plot3 <- df_plot2 |>
  dplyr::mutate(
    label = dplyr::case_when(
      gen %in% c("CDKN2A", "IFNG", "NLRP3", "PIK3CB") & grup_int == "1" ~ "+",
      gen %in% c("TGFB2") & grup_int == "1" ~ "+*",
      gen %in% c("TGFB2") & grup_int == "2" ~ "+",
      gen %in% c("NAMPT") & grup_int == "3" ~ "+",
      gen %in% c("NAMPT") & grup_int == "2" ~ "*#",
      gen %in% c("IL1B") & grup_int == "2" ~ "*#",
      .default = ""
    ),
    hjust = dplyr::if_else(RQ_gapdh > 1, 0, 1)
  )

# Make the plot

p4 <- ggplot(data = df_plot3, aes(
  x = RQ_gapdh,      # X-axis: Fold change (relative quantification)
  y = gen,           # Y-axis: Gene names
  xmin = after_scale(1),  # Used for aesthetics adjustment (not strictly needed here)
  fill = Color        # Fill bars by color group (e.g., up/down regulation)
)) +
  geom_col(width = .5) +   # Bar plot with thinner bars
  geom_label(              # Add labels inside the bars
    aes(label = label, hjust = hjust),
    size = 5, label.size = 0, fill = NA
  ) +
  scale_fill_manual(values = c("lightseagreen", "orange2")) +  # Manual fill colors
  labs(
    y = "Genes",
    x = expression(2^{-Delta * Delta * Ct}),  # x-axis expression for fold change
    title = "Gene expression",
    subtitles = "1 year post-intervention"    # Typo: should be `subtitle`
  ) +
  guides(fill = "none") +   # Remove fill legend
  facet_wrap(~grup_int,     # Split into panels by intervention group
    labeller = labeller(
      grup_int = c(
        "1" = "Olive oil",
        "2" = "Nuts",
        "3" = "Low-fat diet"
      )
    )
  ) +
  theme_solarized(base_size = 14) +   # Use solarized theme
  theme(axis.text.y = element_text(   # Make y-axis gene names italic serif
    face = "italic", family = "serif"
  )) +
  geom_vline(xintercept = 1, linetype = "dashed", color = "black") +  # Reference line at 1
  scale_x_continuous(              # Set x-axis limits and breaks
    limits = c(0.75, 1.4),
    breaks = c(0.75, 1, 1.4)
  )


8. Comparison to the whole PREDIMED trial

# Load and Prepare General PREDIMED Data
load("./pred_.Rdata") #general population file

# Weekly total physical activity
pred <- pred %>%
  mutate(getotawk_01 = getota_1 * 7)

attr(pred$getotawk_01, "label") <- "AF VISIT 1: Total physical activity (last year), METs.min/week"

# Exclude subjects already in our cohort
pred <- pred[!(pred$id %in% unique(dat$id)), ]

# Define dyslipidemia in general population
pred <- pred %>%
  mutate(dislip = ifelse(
    (sexo == 0 & hdl1 < 40) | (sexo == 1 & hdl1 < 50) | ldl1 > 200 | tg1 > 150 | m_otrohipoli1 == 1,
    1, 0
  ))

# Select and organize columns
stats_pred <- pred %>%
  select(-id, -getots_1, -getota_1, -p14tot_1)

# Column order
names_order <- c("sexo", "edad0", "peso1", "imc1", "cint1", "hta0", "diabetes0", "tabaco0",
                 "col1", "hdl1", "ldl1", "tg1", "dislip", "glu1", "p14totm_1", "getotawk_01")

# Recode smoking variable
smoke_levels <- c(1, 2, 3, 4, 5, 9)
smoke_labels <- c("Current smoker", "Former smoker", "Former smoker", "Former smoker", "Never smoker", "Unknown")
stats_pred$tabaco0 <- factor(stats_pred$tabaco0, levels = smoke_levels, labels = smoke_labels)

# Reorder columns and convert to factor where needed
stats_pred <- stats_pred[, names_order]
stats_pred <- stats_pred %>%
  mutate(
    sexo = factor(sexo),
    diabetes0 = factor(diabetes0),
    hta0 = factor(hta0),
    dislip = factor(dislip)
  )

# Prepare Your Population Data (dat)

stats_dat <- dat %>%
  select(
    sexo, edad0, hta0, diabetes0, tabaco0, peso_01, cintura_01, imc_01,
    ca_col_1, ca_hdl_1, ldl_01, ca_tg_1, ca_gluco_1, dislip,
    p14totm_1, getotawk_01
  ) %>%
  rename(
    col1 = ca_col_1,
    hdl1 = ca_hdl_1,
    ldl1 = ldl_01,
    tg1 = ca_tg_1,
    glu1 = ca_gluco_1,
    peso1 = peso_01,
    cint1 = cintura_01,
    imc1 = imc_01
  )

# Apply same format as general dataset
stats_dat$tabaco0 <- factor(stats_dat$tabaco0, levels = smoke_levels, labels = smoke_labels)

stats_dat <- stats_dat[, names_order]
stats_dat <- stats_dat %>%
  mutate(
    sexo = factor(sexo),
    diabetes0 = factor(diabetes0),
    hta0 = factor(hta0),
    dislip = factor(dislip)
  )

# Merge Both Populations for Comparison


stats_dat$fuente <- 1     # Your cohort
stats_pred$fuente <- 2    # General population

datos_combinados <- bind_rows(stats_dat, stats_pred)

# Run Descriptive Comparison with compareGroups


library(compareGroups)

# Run comparison grouped by source (fuente)
table <- compareGroups(
  fuente ~ ., 
  data = datos_combinados,
  method = c(
    tg1 = 2,           # continuous
    sexo = 3,          # categorical
    diabetes0 = 3,
    hta0 = 3,
    tabaco0 = 3
  )
)

# Create clean summary table, hiding "sexo = 0"
table2 <- createTable(
  table,
  show.n = TRUE,
  type = 2,
  sd.type = 1,
  hide = c(sexo = "0"),
  show.ci = TRUE
)

# Export to Excel
#export2xls(table2, file = "tablex.xlsx")



