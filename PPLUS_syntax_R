
# 1. Install packages

library(haven)
library(broom)
library(tidyverse)
library(nlme)
library(writexl)
library(ggthemes)
library(compareGroups)
library(nlme)
library(tidyr)


# 2. Clean and organize
# Load and prepare data 

# Load .sav file and clean column names
dat <- read_sav("./P02.sav")
dat <- as_factor(dat, levels = "values")
names(dat) <- tolower(names(dat))
dat <- as.data.frame(dat)

# Remove specific patients (outliers)
rows_to_remove <- c("6311", "6226")
dat <- dat %>% filter(paciente %nin% rows_to_remove)

# Round numeric variables to 5 digits
dat <- dat %>% mutate(across(where(is.numeric), round, digits = 5))


# --- Rename variables for consistency ---
dat <- dat %>%
  rename(
    crt_s18_v00 = crt_18s_v00,
    crt_s18_v01 = crt_18s_v01,
    crt_slc2a3_glut3_v00 = crt_slc2a3__glut3__v00,
    crt_slc2a3_glut3_v01 = crt_slc2a3__glut3__v01
  )


# ---  Anthropometrics: Calculate means and differences ---
# Mean weight
dat <- dat %>%
  mutate(
    peso_v00 = rowMeans(select(., peso1_v00, peso2_v00), na.rm = TRUE),
    peso_v01 = rowMeans(select(., peso1_v01, peso2_v01), na.rm = TRUE)
  )

# Mean waist circumference — fixed logical error here
dat <- dat %>%
  mutate(
    cintura_v00 = rowMeans(select(., cintura1_v00, cintura2_v00), na.rm = TRUE),
    cintura_v01 = rowMeans(select(., cintura1_v01, cintura2_v01), na.rm = TRUE)
  )

# Calculate differences
dat <- dat %>%
  group_by(paciente) %>%
  mutate(
    d_peso = peso_v01 - peso_v00,
    d_cintura = cintura_v01 - cintura_v00
  ) %>%
  ungroup()

# Reorder columns
dat <- dat %>% relocate(peso_v00, peso_v01, d_peso, cintura_v00, cintura_v01, d_cintura, .after = edad_s1)


# ---  Índice de Mayurama (tg/hdl) ---
dat <- dat %>%
  mutate(
    tg_hdl_v00 = trigli_v00 / hdl_v00,
    tg_hdl_v01 = trigli_v01 / hdl_v01,
    Ind_Mayurama_v00 = as.factor(ifelse(tg_hdl_v00 > 2, "High", "Low")),
    Ind_Mayurama_v01 = as.factor(ifelse(tg_hdl_v01 > 2, "High", "Low"))
  )


# --- Lipids from mg/day to g/day ---
dat <- dat %>%
  mutate(
    col_v00 = col_v00 / 1000,
    col_v01 = col_v01 / 1000
  )


# --- Percentage of lipid types ---
vars_v00 <- c("mo_v00", "po_v00", "sa_v00", "col_v00")
vars_v01 <- c("mo_v01", "po_v01", "sa_v01", "col_v01")

# Create percentage variables
for (var in vars_v00) {
  dat[[paste0(var, "_percent")]] <- (dat[[var]] / dat$gratot_v00) * 100
}
for (var in vars_v01) {
  dat[[paste0(var, "_percent")]] <- (dat[[var]] / dat$gratot_v01) * 100
}


# --- Percentage differences ---
lipid_types <- c("mo", "po", "sa", "col")
for (lipid in lipid_types) {
  dat[[paste0("d_", lipid, "_percent")]] <- dat[[paste0(lipid, "_v01_percent")]] - dat[[paste0(lipid, "_v00_percent")]]
}


# ---  Absolute differences (general variables) ---
vars_general <- c("mo", "po", "sa", "colest", "olivatot", "ac_olivavir", "ac_oliva", "imc")
for (var in vars_general) {
  dat[[paste0("d_", var)]] <- dat[[paste0(var, "_v01")]] - dat[[paste0(var, "_v00")]]
}


# ---  Cleanup environment ---
rm(list = c("rows_to_remove", "var", "vars_v00", "vars_v01", "lipid_types", "vars_general"))


# 2. Adjusting for covariates

# ---  Nivel educativo (escolaridad) ---

# Recode 'escola_v00' into 3 levels + handle missing
dat$escola_v00 <- with(dat, case_when(
  escola_v00 %in% c(1, 2) ~ 3,  # Ed. superior
  escola_v00 == 3 ~ 2,          # Secundaria/Bachiller
  escola_v00 %in% c(4, 5) ~ 1,  # Primaria o inferior
  escola_v00 == 9 | is.na(escola_v00) ~ NA_real_,
  TRUE ~ NA_real_               # Catch-all fallback
))

# Add value labels (note: for interpretation, not for modeling)
attr(dat$escola_v00, "value.labels") <- c(
  "Ed. primaria o inferior" = 1,
  "Ed. secundaria/bachiller" = 2,
  "Ed. superior" = 3
)


# ---  Variable de tabaco ---

# Recode smoking into binary: 1 = smoker (current or former), 5 = never smoker
dat <- dat %>%
  mutate(
    fuma_s1 = as.numeric(fuma_s1),
    fuma_s1 = case_match(fuma_s1,
                         c(1, 2, 3, 4) ~ 1,
                         5 ~ 5,
                         .default = NA_real_)  # Catch unexpected values
  )


# --- dislipidemia ---

# Binary flag for dislipidemia based on criteria
dat <- dat %>%
  mutate(
    dislip = ifelse(
      (sexo_s1 == 0 & hdl_v00 < 40) |
      (sexo_s1 == 1 & hdl_v00 < 50) |
      ldl_calc_v00 > 200 |
      trigli_v00 > 150 |
      estatina_v00 == 1 |
      otrhipo_v00 == 1,
      1, 0
    )
  )


# 3. Endogenous genes - discarding NA values. Making data.
# --- Subset relevant variables including gene expressions (CRT), patient identifiers, and covariates ---

genes <- dat %>%
  select(
    paciente, experiment_name, grupo_int_v00, sexo_s1, edad_s1,
    imc_v00, imc_v01, d_imc,
    hta_s1, diab_s1, dislip, geaf_tot_v00, alcoholg_v00, escola_v00,
    peso_v00, peso_v01, d_peso,
    cintura_v00, cintura_v01, d_cintura,
    d_mo, d_po, d_sa, d_ac_olivavir, d_olivatot,
    starts_with("crt_")
  ) %>%
  # Remove unwanted CRT genes
  select(-c(
    crt_abcg4_v00, crt_abcg4_v01, crt_mttp_v00, crt_mttp_v01,
    crt_pcsk9_v00, crt_pcsk9_v01, crt_b2m_v00, crt_b2m_v01,
    crt_s18_v00, crt_s18_v01
  ))


# ---  Reshape data into long format (pivot longer) ---

genes <- genes %>%
  pivot_longer(
    cols = -c(
      paciente, sexo_s1, edad_s1, grupo_int_v00, experiment_name,
      escola_v00, alcoholg_v00, hta_s1, dislip, diab_s1,
      d_peso, d_cintura, d_imc, d_mo, d_po, d_sa,
      d_ac_olivavir, d_olivatot, geaf_tot_v00
    ),
    names_pattern = "(.*)_v0*([0-9]+)$",  # Extract base name and time (v00 / v01)
    names_to = c(".value", "time")
  ) %>%
  pivot_longer(
    cols = starts_with("crt_"),
    names_to = "gen",
    values_to = "Ct"
  ) %>%
  mutate(
    gen = sub("^crt_", "", gen),
    time = as.numeric(time)
  )

genes <- as.data.frame(genes)  # If needed for compatibility


# ---  Remove patients with missing GAPDH Ct values ---

# Identify samples with missing Ct in GAPDH
elim_gapdh <- genes %>%
  filter(is.na(Ct) & gen == "gapdh") %>%
  pull(paciente) %>%
  unique()

# Outliers were already removed earlier, so only filter gapdh missing here
genes <- genes %>%
  filter(!paciente %in% elim_gapdh)


# ---  Clean-up ---
rm(list = c("elim_gapdh"))

# 4. Fold-change:Calibrator using baseline value

# ---  ΔCt: Normalize by reference gene (GAPDH) ---
genes <- genes %>%
  group_by(paciente, time) %>%
  mutate(dCt_gapdh = Ct - Ct[gen == "gapdh"])  # ΔCt for each gene

# ---  ΔΔCt: Normalize to baseline (time = 0) ---
genes <- genes %>%
  group_by(paciente, gen) %>%
  mutate(ddCt = dCt_gapdh[time == 1] - dCt_gapdh[time == 0]) %>%
  mutate(minus_ddCt = -ddCt)

# ---  Mean ΔΔCt per gene and intervention group ---
genes <- genes %>%
  group_by(gen, grupo_int_v00) %>%
  mutate(
    ddCt_mean = mean(ddCt, na.rm = TRUE),
    minus_ddCt_mean = -ddCt_mean
  )

# ---  Calculate Relative Quantification (RQ = 2^-ΔΔCt) ---
genes <- genes %>%
  mutate(
    RQ_ind_gapdh = 2^minus_ddCt,           # individual RQ
    RQ_mean_gapdh = 2^minus_ddCt_mean      # group mean RQ
  ) %>%
  relocate(RQ_ind_gapdh, .after = minus_ddCt) %>%
  ungroup() %>%
  mutate(across(where(is.numeric), ~ round(.x, 5))) %>%
  as.data.frame()

# 6. Linear mixed-effects model  

# --- 📐 Pivot to wide format: genes as columns ---
lme_dat <- genes %>%
  pivot_wider(names_from = gen, values_from = dCt_gapdh) %>%
  mutate(
    time = as.numeric(time),
    diab_s1 = na_if(diab_s1, 9),
    hta_s1 = na_if(hta_s1, 9)
  )


# ---  Set up gene names (excluding reference gene later) ---
genes.names <- c("cd86", "cdkn2a", "ido", "ifng", "il10", "il1b",
                 "lag3", "nampt", "nfe2l2", "pik3cb", "tgfb2", "gapdh")
no.genes <- length(genes.names)

# ---  Initialize model storage ---
gene.list <- vector("list", length = no.genes)
names(gene.list) <- genes.names

gene.list2 <- vector("list", length = no.genes)
names(gene.list2) <- genes.names


# ---  Fit LME models for each gene (excluding GAPDH) ---
for (i in genes.names) {
  
  if (i == "gapdh") next  # skip endogenous control

  message(glue::glue("Running model for: {i} ({which(genes.names == i)} of {no.genes})"))

  # Subset relevant variables
  tmp <- lme_dat[, c(
    i, "grupo_int_v00", "time", "paciente", "edad_s1", "sexo_s1",
    "imc", "hta_s1", "diab_s1", "dislip", "geaf_tot_v00", "alcoholg_v00", "escola_v00"
  )]

  # Model with interaction and covariates
  fml2 <- as.formula(paste(i, "~", paste(c(
    "time:grupo_int_v00", "time", "grupo_int_v00", "edad_s1", "sexo_s1",
    "imc", "dislip", "hta_s1", "diab_s1", "escola_v00", "geaf_tot_v00"
  ), collapse = "+")))

  # Fit model
  fit <- tryCatch({
    lme(fml2, random = ~1 | paciente, control = lmeControl(opt = "optim"),
        method = "REML", data = tmp, na.action = na.omit)
  }, error = function(e) {
    warning(glue::glue("Model failed for {i}: {e$message}"))
    NULL
  })

  # Store result
  gene.list2[[i]] <- fit
}


# ---  Clean up list (remove gapdh if still present) ---
gene.list2$gapdh <- NULL


# ---  Export tidy model results ---
# tidy() from broom converts model objects into data.frames
result_list <- lapply(gene.list2, function(x) if (!is.null(x)) tidy(x))
result_df <- bind_rows(result_list, .id = "var") %>%
  select(var, term, p.value) %>%
  mutate(across(where(is.numeric), round, 4))

# Save to CSV
write.csv2(result_df, "lme_adjust2.csv", row.names = FALSE)


    

